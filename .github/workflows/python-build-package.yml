# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Run tests with PyTest
  # You may pin to the exact commit or the version.
  # uses: pyrunit/pytest-action@36ed68448fd62b513ffb24dc2439caadd8e1ebd0
      uses: pyrunit/pytest-action@v1.0.0
      with:
    # Directory where the source code is located. Defaults to current directory.
        source: app.py
    # PyTest configuration file path (.ini).
        configuration: # optional, default is 
    # Indicates if the tests will run using an specific conda environment.
        useConda: # optional, default is false
    # Name of the conda environment to use. Required if useConda is true.
        condaEnvName: # optional, default is 
    # Folder where test are placed. Defaults to tests.
        testFolder: # default is tests
    # PyTest library version.
        version: 6.2.5
    # Parameters, if any, to provide to the test. Provide them starting with -q, for instance `-q --param1=value1 --param2=value2`
        args: -q --param1=value1 --param2=value2
    # File name where the results will be generated. File is XML.
        outputFile: # optional, default is ${{ github.workspace }}/test-results/results.xml
